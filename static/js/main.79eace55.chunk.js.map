{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["seedrandom","require","Cell","this","props","typecell","className","onClick","e","onContextMenu","value","React","Component","Board","i","column","width","row","Math","floor","height","board","console","log","hintsY","rows","map","item","entry","_","j","key","renderCell","App","handleClick","_event","state","slice","actual","setState","handleContextMenu","event","preventDefault","actualrow","push","hintsX","rowHints","streak","col","hints","colHints","seed","undefined","Date","getTime","rng","rando","ceil","generateBoard","getcolHints","getrowHints","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79eace55.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nvar seedrandom = require('seedrandom');\r\n\r\nclass Cell extends React.Component\r\n{  \r\n  render()\r\n  {\r\n    switch (this.props.typecell) {\r\n      case 'Empty':\r\n        return (\r\n          <button\r\n            className=\"cell-empty\"\r\n            onClick = {(e) => this.props.onClick(e)}\r\n            onContextMenu = {(e) => this.props.onContextMenu(e)}\r\n            value = {this.props.value}  \r\n            >\r\n          </button>)\r\n      case 'Incorrect':\r\n          return (\r\n            <button\r\n              className=\"cell-empty\"\r\n              onClick = {(e) => this.props.onClick(e)}\r\n              onContextMenu = {(e) => this.props.onContextMenu(e)}   \r\n              value = {this.props.value}  \r\n              >\r\n                X\r\n            </button>)\r\n      case 'Full':\r\n          return (\r\n            <button\r\n              className=\"cell-full\"\r\n              onClick = {(e) => this.props.onClick(e)}\r\n              onContextMenu = {(e) => this.props.onContextMenu(e)}\r\n              value = {this.props.value}  \r\n              >\r\n            </button>)\r\n      default:\r\n        return (\r\n          <button            \r\n            className=\"cell\"\r\n            onClick = {(e) => this.props.onClick(e)}\r\n            onContextMenu = {(e) => this.props.onContextMenu(e)}\r\n            value = {this.props.value}  \r\n            >\r\n          </button>)\r\n    }\r\n  }\r\n}\r\n\r\nclass Board extends React.Component\r\n{\r\n\r\n  renderCell(i)\r\n  {\r\n    let column = i % this.props.width\r\n    let row = Math.floor(i/this.props.height)\r\n    return (\r\n      <Cell\r\n        value = {this.props.board[row][column][0]}\r\n        onClick = {(e) => this.props.onClick(e,i)}\r\n        onContextMenu = {(e) => this.props.onContextMenu(e,i)}\r\n        typecell = {this.props.board[row][column][1]}\r\n      />\r\n    )\r\n  }\r\n\r\n  render()\r\n  {\r\n    console.log(this.props.hintsY)\r\n    var rows =  this.props.board.map( (item, row) => { // item is the actual object in board and row is the row index\r\n      var entry = item.map((_, j) => {\r\n        return (\r\n          <td key = {row * this.props.width + j}>{this.renderCell(row * this.props.width + j)}</td>\r\n        )\r\n      })\r\n      return (\r\n        <tr key = {row}><td>{this.props.hintsY[row]}</td>{entry}</tr>\r\n      )\r\n    })\r\n\r\n    \r\n\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          \r\n        </div>\r\n        <table className=\"table\">\r\n          <tbody>\r\n            {rows}\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends React.Component\r\n{\r\n  \r\n  constructor(props)\r\n  {\r\n      super(props)\r\n      \r\n      var width = 10\r\n      var height = 10\r\n      var board = []\r\n      var actual = []\r\n      for (let i = 0; i < height; i++)\r\n      {\r\n        let row = []\r\n        let actualrow = []\r\n        for(let j = 0; j < width; j++)\r\n        {\r\n          row.push([null, ''])\r\n          actualrow.push(null)\r\n        }\r\n        board[i] = row\r\n        actual[i] = actualrow\r\n      };\r\n\r\n      this.state = \r\n      {\r\n        height : height,\r\n        width : width,\r\n        board : board,\r\n        actual : actual,\r\n        hintsX: [],\r\n        hintsY : []\r\n      }\r\n  }\r\n\r\n  getrowHints()\r\n  {\r\n    var hintsY = []\r\n    for (let row = 0; row < this.state.height; row++)\r\n    {\r\n      var rowHints = []\r\n      var streak = 0\r\n      for (let col = 0; col < this.state.width; col++)\r\n      {\r\n        if (this.state.actual[row][col] == 'Full')\r\n        {\r\n          streak += 1\r\n        }\r\n        else\r\n        {\r\n          if (streak > 0)\r\n          {\r\n            rowHints.push(streak)\r\n            streak = 0\r\n          }\r\n        }\r\n      }\r\n      if (streak > 0)\r\n      {\r\n        rowHints.push(streak)\r\n      }\r\n      console.log(\"rowHints: \" + rowHints)\r\n      hintsY.push(rowHints)\r\n    }\r\n    console.log(hintsY)\r\n    this.setState({ hintsY })\r\n  }\r\n\r\n  getcolHints()\r\n  {\r\n    var hints = []\r\n    var actual = this.state.actual.slice(0)\r\n    for (let i = 0; i < this.state.height; i++)\r\n    {\r\n      var colHints = []\r\n      var streak = 0\r\n      for (let j = 0; j < this.state.width; j++)\r\n      {\r\n        if (actual[j][i] == 'Full')\r\n        {\r\n          streak += 1\r\n        }\r\n        else\r\n        {\r\n          if (streak > 0)\r\n          {\r\n            colHints.push(streak)\r\n            streak = 0\r\n          }\r\n        }\r\n      }\r\n      hints.push(colHints)\r\n    }\r\n    this.setState({ hintsX : hints })\r\n  }\r\n\r\n  generateBoard(seed)\r\n  {\r\n    if (seed === undefined)\r\n    {\r\n      seed = '' + new Date().getTime()\r\n    }\r\n    var rng = seedrandom(seed)\r\n    var actual = this.state.actual.slice(0)\r\n    for (let row = 0; row < this.state.height; row++)\r\n    {\r\n      for (let col = 0; col < this.state.width; col++)\r\n      {\r\n        var rando = Math.ceil(rng() * 2)\r\n        actual[row][col] =  (rando == 2) ? 'Full' : 'Empty' \r\n      }\r\n    }\r\n    this.setState({actual})\r\n  }\r\n\r\n  handleClick = (_event,i) =>\r\n  {\r\n    // Intention is to fill cell\r\n    // alert('left click')\r\n    \r\n    var column = i % this.state.width\r\n    var row = Math.floor(i/this.state.height)\r\n    var board = this.state.board.slice(0)\r\n    \r\n    if (board[row][column][1] != '') return\r\n    board[row][column][0] = i\r\n    if (this.state.actual[row][column] == 'Full')\r\n    {\r\n      board[row][column][1] = 'Full'\r\n    } else {\r\n      board[row][column][1] = 'Incorrect'\r\n    }\r\n    \r\n    this.setState({\r\n      board\r\n    })\r\n  }\r\n\r\n  handleContextMenu = (event, i) =>\r\n  {\r\n    //Intention is to declare cell empty\r\n    // alert('right click')\r\n    event.preventDefault()\r\n    var column = i % this.state.width \r\n    var row = Math.floor(i/this.state.height)\r\n    var board = this.state.board.slice(0)\r\n    if (board[row][column][1] != '') return\r\n    board[row][column][0] = i\r\n    if (this.state.actual[row][column] == 'Empty')\r\n    {\r\n      board[row][column][1] = 'Empty'\r\n    } else {\r\n      board[row][column][1] = 'Incorrect'\r\n    }\r\n\r\n    this.setState({\r\n      board\r\n    })\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    this.generateBoard()\r\n    this.getcolHints()\r\n    this.getrowHints()\r\n  }\r\n  \r\n  render()\r\n  {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <p>Check out <a href=\"http://liouh.com/picross\">the picross source</a> for what I'm going to completely revamp because Mr. Henry Liou is too busy</p>\r\n          <p>Check out my progress on this on my <a href=\"https://github.com/dhrumilp15/picross\">github</a> </p>\r\n        </div>\r\n        <div>\r\n          \r\n        </div>\r\n        <Board\r\n          board = {this.state.board}\r\n          height = {this.state.height}\r\n          width = {this.state.width}\r\n          onClick = {(event,i) => this.handleClick(event,i)}\r\n          onContextMenu = {(event,i) => this.handleContextMenu(event, i)}\r\n          actual = {this.state.actual}\r\n          hintsX  = {this.state.hintsX}\r\n          hintsY  = {this.state.hintsY}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}